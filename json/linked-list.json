{"name":"linked-list","blurb":"Write a simple linked list implementation that uses the Proxy pattern","description":"In simple-linked-list we created a push-down stack using a purely\nfunctional linked list, but if we allow mutability and add another\npointer we can build a very fast deque data structure (Double-Ended\nqueue).\n\nDeques have four fundamental operations (using Array terminology):\n\n* push (insert value at back)\n* unshift (insert value at front)\n* pop (remove value at back)\n* shift (remove value at front)\n\nThe difference between deque and Array performance is that a deque\nimplements all of these operations in constant time. Even clever\nimplemetations of Array will often have to copy the entire Array\nin order to unshift.\n\nUnder the hood we'll use the same Element class from\nsimple-linked-list, but there should be a @next and @prev attributes\nthat are both writable. @prev should point to the previous Element in\nthe list.\n\nTo make the API usable, you'll use a Deque class as a proxy for this\nlist. There two good ways to implement Deque: maintain separate references to the\nfirst and last Element, or maintain a reference to one of them and\nensure that the list is circular (first.prev.next == first).\n\nTo keep your implementation simple, the tests will not cover error\nconditions. Specifically: pop or shift will never be called on an empty Deque.\n\nIn languages that do not have good support for mutability (such as\nElixir or Erlang), you may choose to implement a functional Deque\nwhere shift and pop have amortized O(1) time. The simplest data structure\nfor this will have a pair of linked lists for the front and back,\nwhere iteration order is front ++ reverse back.\n\nExamples:\n\n    deque = Deque.new\n    deque.push(10)\n    deque.push(20)\n    deque.pop() #=\u003e 20\n    deque.push(30)\n    deque.shift() #=\u003e 10\n    deque.unshift(40)\n    deque.push(50)\n    deque.shift() #=\u003e 40\n    deque.pop() #=\u003e 50\n    deque.shift() #=\u003e 30\n","source":"Inspired by 'Data Structures and Algorithms with Object-Oriented Design Patterns in Ruby', singly linked-lists.","source_url":"http://www.brpreiss.com/books/opus8/html/page96.html#SECTION004300000000000000000","expectations":[]}